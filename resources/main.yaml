substitutions:
  star_icon: "\U000F04D2"
  sun_icon: "\U000F0599"
  moon_icon: "\U000F0594"

  lcd_font: "https://github.com/domgrimm/esphome-groclock/raw/refs/heads/main/resources/LCD.ttf"
  sun_image: "https://github.com/domgrimm/esphome-groclock/raw/refs/heads/main/resources/sun.png"
  star_image: "https://github.com/domgrimm/esphome-groclock/raw/refs/heads/main/resources/star.png"

  sun_background_color: "FFCE2B"
  moon_background_color: "5DC5FC"

packages:
  tz: github://domgrimm/esphome-groclock/resources/tz.yaml@main

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  name_add_mac_suffix: false
  platformio_options:
    board_build.flash_mode: dio

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 16MB
  framework:
    type: esp-idf
    sdkconfig_options:
      COMPILER_OPTIMIZATION_SIZE: y
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: y
      CONFIG_SPIRAM_RODATA: y

psram:
  mode: octal
  speed: 80MHz

logger:

api:

ota:
  - platform: esphome


wifi:
  networks:
    - ssid: ${ssid}
      password: ${password}
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Groclock Fallback Hotspot"
    ap_timeout: 30s

captive_portal:

web_server:
  version: 3
  log: False
  sorting_groups:
    - id: time_group
      name: "Time Settings"
      sorting_weight: 2
    - id: diag_group
      name: "Diagnostics"
      sorting_weight: 60

# --- Images ---
image:
  - file: ${sun_image}
    id: sun_image
    type: RGB565
    transparency: alpha_channel
  - file: ${star_image}
    id: star_image
    type: RGB565
    transparency: alpha_channel

# --- Fonts ---
font:
  - file: "fonts/materialdesignicons-webfont.ttf"
    id: small_stars_font
    size: 70
    glyphs: ["${star_icon}"]
  - file: "fonts/materialdesignicons-webfont.ttf"
    id: moon_icon_font
    size: 360
    glyphs: ["${moon_icon}"]
  - file: "fonts/materialdesignicons-webfont.ttf"
    id: sun_icon_font
    size: 480
    glyphs: ["${sun_icon}"]
  - file: ${lcd_font}
    id: lcd_time_font
    size: 60
    glyphs: "0123456789APM:-"

# --- Globals ---
globals:
  - id: star_visible
    type: std::array<bool, 12>
  - id: timer_running
    type: bool
    initial_value: 'false'
  - id: timer_start_time
    type: unsigned int
    initial_value: '0'
  - id: timer_wake_time
    type: unsigned int
    initial_value: '0'
  - id: total_duration_sec
    type: unsigned int
    initial_value: '0'
  - id: last_sections_passed
    type: int
    initial_value: '-1'
  - id: saved_posix_tz
    type: std::string
    restore_value: True

# --- I2C & Touchscreen ---
i2c:
  - id: bus_a
    sda: GPIO19
    scl: GPIO45

touchscreen:
  platform: gt911
  i2c_id: bus_a
  id: touch_screen
  display: screen

# --- SPI & Display ---
spi:
  - id: lcd_spi
    clk_pin: GPIO48
    mosi_pin: GPIO47

display:
  - platform: st7701s
    id: screen
    update_interval: never
    auto_clear_enabled: false
    spi_id: lcd_spi
    spi_mode: MODE3
    data_rate: 2MHz
    color_order: RGB
    invert_colors: false
    dimensions:
      width: 480
      height: 480
    cs_pin: 39
    de_pin: 18
    hsync_pin: 16
    vsync_pin: 17
    pclk_pin: 21
    pclk_frequency: 16MHz
    pclk_inverted: false
    hsync_pulse_width: 8
    hsync_front_porch: 10
    hsync_back_porch: 20
    vsync_pulse_width: 8
    vsync_front_porch: 10
    vsync_back_porch: 10
    init_sequence:
      - 1
      - [0xFF, 0x77, 0x01, 0x00, 0x00, 0x10]
      - [0xCD, 0x00]
    data_pins:
      red: [11, 12, 13, 14, 0]
      green: [8, 20, 3, 46, 9, 10]
      blue: [4, 5, 6, 7, 15]

# --- LVGL ---
lvgl:
  displays: screen
  touchscreens: touch_screen
  buffer_size: 25%
  color_depth: 16
  style_definitions:
    - id: sun_style
      bg_color: 0xFFED2B
      text_color: 0xFFFFFF
      bg_opa: COVER
    - id: moon_style
      bg_color: 0x5DC5FC
      text_color: 0xFFFFFF
      bg_opa: COVER
    - id: time_style
      text_color: 0xAAAAAA
      text_font: lcd_time_font
      text_align: CENTER
    - id: time_style_sleep
      text_color: 0xD9D9D9
      text_font: lcd_time_font
      text_align: CENTER
  pages:
    - id: sun_page
      widgets:
        - obj:
            scrollable: False
            width: 100%
            height: 100%
            styles: [sun_style]
            widgets:
              - image:
                  id: sun_image_img
                  src: sun_image
                  align: CENTER
              - label:
                  id: time_label_sun
                  align: BOTTOM_RIGHT
                  y: 15
                  x: 0
                  text_font: lcd_time_font
                  styles: [time_style]
                  text: !lambda |-
                    if (id(sntp_time).now().is_valid()) {
                      char buf[16];
                      time_t now_ts = id(sntp_time).now().timestamp;
                      struct tm *tm_info = localtime(&now_ts);
                      strftime(buf, sizeof(buf), "%I:%M%p", tm_info);
                      return std::string(buf);
                    } else {
                      return std::string("--:--");
                    }
    - id: moon_page
      widgets:
        - obj:
            scrollable: False
            width: 100%
            height: 100%
            styles: [moon_style]
            widgets:
              - label:
                  id: time_label_moon
                  align: BOTTOM_MID
                  y: -40
                  text_font: lcd_time_font
                  styles: [time_style_sleep]
                  text: !lambda |-
                    if (id(sntp_time).now().is_valid()) {
                      char buf[16];
                      time_t now_ts = id(sntp_time).now().timestamp;
                      struct tm *tm_info = localtime(&now_ts);
                      strftime(buf, sizeof(buf), "%I:%M%p", tm_info);
                      return std::string(buf);
                    } else {
                      return std::string("--:--");
                    }
              - image:
                  id: star_image_img
                  src: star_image
                  align: CENTER
                  zoom: 0.75
              # 12 stars, positioned in a circle
              - label: { id: star_0,  align: CENTER, text_font: small_stars_font, text: "${star_icon}", x: 105, y: -182,  hidden: true }
              - label: { id: star_1,  align: CENTER, text_font: small_stars_font, text: "${star_icon}", x: 182, y: -105, hidden: true }
              - label: { id: star_2,  align: CENTER, text_font: small_stars_font, text: "${star_icon}", x: 210, y: 0, hidden: true }
              - label: { id: star_3,  align: CENTER, text_font: small_stars_font, text: "${star_icon}", x: 182, y: 105, hidden: true }
              - label: { id: star_4,  align: CENTER, text_font: small_stars_font, text: "${star_icon}", x: 105, y: 182, hidden: true }
              - label: { id: star_5,  align: CENTER, text_font: small_stars_font, text: "${star_icon}", x: 0, y: 210, hidden: true }
              - label: { id: star_6,  align: CENTER, text_font: small_stars_font, text: "${star_icon}", x: -105, y: 182, hidden: true }
              - label: { id: star_7,  align: CENTER, text_font: small_stars_font, text: "${star_icon}", x: -182,  y: 105, hidden: true }
              - label: { id: star_8,  align: CENTER, text_font: small_stars_font, text: "${star_icon}", x: -210,  y: 0, hidden: true }
              - label: { id: star_9, align: CENTER, text_font: small_stars_font, text: "${star_icon}", x: -182,  y: -105, hidden: true }
              - label: { id: star_10, align: CENTER, text_font: small_stars_font, text: "${star_icon}", x: -105, y: -182,  hidden: true }
              - label: { id: star_11,  align: CENTER, text_font: small_stars_font, text: "${star_icon}", x: 0, y: -210,  hidden: true }

# --- Time ---
time:
  - platform: sntp
    id: sntp_time
    servers:
      - 0.pool.ntp.org
      - 1.pool.ntp.org
      - 2.pool.ntp.org

# --- Wifi Signal ---
sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: diagnostic
    internal: true
  # Reports the WiFi signal strength in %
  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Strength"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: diagnostic
    web_server:
      sorting_group_id: diag_group

text_sensor:
# --- Wifi Info ---
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      id: ip_address
      entity_category: diagnostic
      web_server:
        sorting_group_id: diag_group
    ssid:
      name: "Connected SSID"
      entity_category: diagnostic
      web_server:
        sorting_group_id: diag_group
    mac_address:
      name: "Mac Address"
      entity_category: diagnostic
      web_server:
        sorting_group_id: diag_group

# --- Current time sensor ---
  - platform: template
    name: "Device Current Time"
    icon: "mdi:clock"
    update_interval: 1s
    web_server:
      sorting_weight: 1
      sorting_group_id: time_group
    lambda: |-
      auto time = id(sntp_time).now();
      if (time.is_valid()) {
        time_t now_ts = time.timestamp;
        char buffer[32];
        strftime(buffer, sizeof(buffer), "%Y-%m-%d %H:%M:%S", localtime(&now_ts));
        return std::string(buffer);
      } else {
        return std::string("Waiting for NTP...");
      }

# --- Show Current Time on Device ---
select:
  - platform: template
    id: view_time
    name: Show Time
    optimistic: True
    restore_value: True
    options:
      - "Off"
      - "Digital"
#      - "Analogue"
    on_value: 
      then:
        - if:
            condition:
              lambda: 'return x == "Digital";'
            then:
              - lvgl.widget.show: time_label_sun
              - lvgl.widget.show: time_label_moon
            else:
              - lvgl.widget.hide: time_label_sun
              - lvgl.widget.hide: time_label_moon


# --- Datetime Pickers ---
datetime:
  - platform: template
    id: sleep_time_1
    name: Sleep Time 1
    type: time
    icon: "mdi:weather-night"
    entity_category: "Config"
    optimistic: true
    initial_value: { hour: 18, minute: 00, second: 00 }
    restore_value: true
    web_server:
      sorting_weight: 3
      sorting_group_id: time_group
    on_time:
      then:
        - script.execute: screen_sleep
  - platform: template
    id: wake_time_1
    name: Wake Time 1
    type: time
    icon: "mdi:weather-sunny"
    entity_category: "Config"
    optimistic: true
    initial_value: { hour: 7, minute: 00, second: 00 }
    restore_value: true
    web_server:
      sorting_weight: 4
      sorting_group_id: time_group
    on_time:
      then:
        - script.execute: screen_wake
  - platform: template
    id: sleep_time_2
    name: Sleep Time 2
    type: time
    icon: "mdi:weather-night"
    entity_category: "Config"
    optimistic: true
    initial_value: { hour: 18, minute: 00, second: 00 }
    restore_value: true
    web_server:
      sorting_weight: 6
      sorting_group_id: time_group
    on_time:
      - if:
          condition:
            switch.is_on: sleep_2_enable
          then:
            - script.execute: screen_sleep
  - platform: template
    id: wake_time_2
    name: Wake Time 2
    type: time
    icon: "mdi:weather-sunny"
    entity_category: "Config"
    optimistic: true
    initial_value: { hour: 7, minute: 00, second: 00 }
    restore_value: true
    web_server:
      sorting_weight: 7
      sorting_group_id: time_group
    on_time:
      - if:
          condition:
            switch.is_on: sleep_2_enable
          then:
            - script.execute: screen_wake
  - platform: template
    id: sleep_time_3
    name: Sleep Time 3
    type: time
    icon: "mdi:weather-night"
    entity_category: "Config"
    optimistic: true
    initial_value: { hour: 18, minute: 00, second: 00 }
    restore_value: true
    web_server:
      sorting_weight: 9
      sorting_group_id: time_group
    on_time:
      - if:
          condition:
            switch.is_on: sleep_3_enable
          then:
            - script.execute: screen_sleep
  - platform: template
    id: wake_time_3
    name: Wake Time 3
    type: time
    icon: "mdi:weather-sunny"
    entity_category: "Config"
    optimistic: true
    initial_value: { hour: 7, minute: 00, second: 00 }
    restore_value: true
    web_server:
      sorting_weight: 10
      sorting_group_id: time_group
    on_time:
      - if:
          condition:
            switch.is_on: sleep_3_enable
          then:
            - script.execute: screen_wake

# --- Interval for Star Timer and Time Updates ---
interval:
  - interval: 1s
    then:
      - lvgl.label.update:
          id: time_label_sun
          text: !lambda |-
            if (id(sntp_time).now().is_valid()) {
              char buf[16];
              time_t now_ts = id(sntp_time).now().timestamp;
              struct tm *tm_info = localtime(&now_ts);
              strftime(buf, sizeof(buf), "%I:%M%p", tm_info);
              return std::string(buf);
            } else {
              return std::string("--:--");
            }
      - lvgl.label.update:
          id: time_label_moon
          text: !lambda |-
            if (id(sntp_time).now().is_valid()) {
              char buf[16];
              time_t now_ts = id(sntp_time).now().timestamp;
              struct tm *tm_info = localtime(&now_ts);
              strftime(buf, sizeof(buf), "%I:%M%p", tm_info);
              return std::string(buf);
            } else {
              return std::string("--:--");
            }
      - lambda: |-
          if (id(timer_running)) {
            auto now = id(sntp_time).now();
            if (!now.is_valid()) return;
            if (now.timestamp >= id(timer_wake_time)) {
              id(screen_wake).execute();
              return;
            }
            if (now.timestamp > id(timer_start_time)) {
              if (id(total_duration_sec) == 0) return;
              float elapsed = now.timestamp - id(timer_start_time);
              float time_per_star = id(total_duration_sec) / 12.0;
              int sections_passed = elapsed / time_per_star;
              if (sections_passed != id(last_sections_passed)) {
                id(last_sections_passed) = sections_passed;
                for (int i = 0; i < 12; ++i) {
                  id(star_visible)[i] = (i >= sections_passed);
                }
              }
            }
          }
      # Show/hide each star explicitly
      - if:
          condition:
            lambda: 'return id(star_visible)[0];'
          then:
            - lvgl.widget.show: star_0
          else:
            - lvgl.widget.hide: star_0
      - if:
          condition:
            lambda: 'return id(star_visible)[1];'
          then:
            - lvgl.widget.show: star_1
          else:
            - lvgl.widget.hide: star_1
      - if:
          condition:
            lambda: 'return id(star_visible)[2];'
          then:
            - lvgl.widget.show: star_2
          else:
            - lvgl.widget.hide: star_2
      - if:
          condition:
            lambda: 'return id(star_visible)[3];'
          then:
            - lvgl.widget.show: star_3
          else:
            - lvgl.widget.hide: star_3
      - if:
          condition:
            lambda: 'return id(star_visible)[4];'
          then:
            - lvgl.widget.show: star_4
          else:
            - lvgl.widget.hide: star_4
      - if:
          condition:
            lambda: 'return id(star_visible)[5];'
          then:
            - lvgl.widget.show: star_5
          else:
            - lvgl.widget.hide: star_5
      - if:
          condition:
            lambda: 'return id(star_visible)[6];'
          then:
            - lvgl.widget.show: star_6
          else:
            - lvgl.widget.hide: star_6
      - if:
          condition:
            lambda: 'return id(star_visible)[7];'
          then:
            - lvgl.widget.show: star_7
          else:
            - lvgl.widget.hide: star_7
      - if:
          condition:
            lambda: 'return id(star_visible)[8];'
          then:
            - lvgl.widget.show: star_8
          else:
            - lvgl.widget.hide: star_8
      - if:
          condition:
            lambda: 'return id(star_visible)[9];'
          then:
            - lvgl.widget.show: star_9
          else:
            - lvgl.widget.hide: star_9
      - if:
          condition:
            lambda: 'return id(star_visible)[10];'
          then:
            - lvgl.widget.show: star_10
          else:
            - lvgl.widget.hide: star_10
      - if:
          condition:
            lambda: 'return id(star_visible)[11];'
          then:
            - lvgl.widget.show: star_11
          else:
            - lvgl.widget.hide: star_11

# --- Scripts ---
script:
  - id: screen_sleep
    then:
      - script.execute: start_timer
      - lvgl.page.show: moon_page
      - light.turn_on:
          id: screen_brightness
          brightness: !lambda "return id(screen_brightness_sleep).state / 100.0;"
  - id: screen_wake
    then:
      - script.execute: stop_timer
      - lvgl.page.show: sun_page
      - light.turn_on:
          id: screen_brightness
          brightness: !lambda "return id(screen_brightness_awake).state / 100.0;"
  - id: start_timer
    then:
      - lambda: |-
          auto now = id(sntp_time).now();
          if (!now.is_valid()) return;
          
          time_t current_ts = now.timestamp;
          struct tm *tm_now = localtime(&current_ts);
          int seconds_since_midnight_now = tm_now->tm_hour * 3600 + tm_now->tm_min * 60 + tm_now->tm_sec;
          unsigned int today_start_ts = current_ts - seconds_since_midnight_now;
          
          // Initialize with default timer 1 values
          unsigned int sleep_seconds = id(sleep_time_1).hour * 3600 + id(sleep_time_1).minute * 60 + id(sleep_time_1).second;
          unsigned int wake_seconds  = id(wake_time_1).hour * 3600 + id(wake_time_1).minute * 60 + id(wake_time_1).second;
          unsigned int min_wake_ts = UINT_MAX;
          unsigned int selected_sleep_ts = 0;
          
          // Helper function to calculate next occurrence
          auto calculate_timestamps = [&](unsigned int sleep_sec, unsigned int wake_sec) -> std::pair<unsigned int, unsigned int> {
            unsigned int sleep_ts = today_start_ts + sleep_sec;
            unsigned int wake_ts = today_start_ts + wake_sec;
            if (wake_ts <= sleep_ts) wake_ts += 86400;
            if (sleep_ts < current_ts) {
              sleep_ts += 86400;
              wake_ts += 86400;
            }
            return {sleep_ts, wake_ts};
          };
          
          // Check Timer 1 (always active)
          auto [sleep_ts1, wake_ts1] = calculate_timestamps(
            id(sleep_time_1).hour*3600 + id(sleep_time_1).minute*60,
            id(wake_time_1).hour*3600 + id(wake_time_1).minute*60
          );
          if (wake_ts1 < min_wake_ts) {
            min_wake_ts = wake_ts1;
            selected_sleep_ts = sleep_ts1;
          }
          
          // Check Timer 2 if enabled
          if (id(sleep_2_enable).state) {
            auto [sleep_ts2, wake_ts2] = calculate_timestamps(
              id(sleep_time_2).hour*3600 + id(sleep_time_2).minute*60,
              id(wake_time_2).hour*3600 + id(wake_time_2).minute*60
            );
            if (wake_ts2 < min_wake_ts) {
              min_wake_ts = wake_ts2;
              selected_sleep_ts = sleep_ts2;
            }
          }
          
          // Check Timer 3 if enabled
          if (id(sleep_3_enable).state) {
            auto [sleep_ts3, wake_ts3] = calculate_timestamps(
              id(sleep_time_3).hour*3600 + id(sleep_time_3).minute*60,
              id(wake_time_3).hour*3600 + id(wake_time_3).minute*60
            );
            if (wake_ts3 < min_wake_ts) {
              min_wake_ts = wake_ts3;
              selected_sleep_ts = sleep_ts3;
            }
          }
          
          // Apply soonest wake time
          if (min_wake_ts != UINT_MAX) {
            id(total_duration_sec) = min_wake_ts - selected_sleep_ts;
            id(timer_start_time) = selected_sleep_ts;
            id(timer_wake_time) = min_wake_ts;
            id(timer_running) = true;
            id(last_sections_passed) = -1;
            for (int i = 0; i < 12; ++i) {
              id(star_visible)[i] = true;
            }
          }
  - id: stop_timer
    then:
      - lambda: |-
          id(timer_running) = false;
          for (int i = 0; i < 12; ++i) {
            id(star_visible)[i] = false;
          }

# --- Brightness Controls ---
output:
  # Backlight LED
  - platform: ledc
    pin: GPIO38
    id: GPIO38
    frequency: 100Hz

  # Built in 240v relay
  - id: internal_relay_1
    platform: gpio
    pin: 40

light:
  - platform: monochromatic
    output: GPIO38
    name: Screen Brightness
    id: screen_brightness
    restore_mode: ALWAYS_ON
    internal: True

# --- Brightness Sliders ---
number:
  - platform: template
    name: "Screen Brightness"
    id: screen_brightness_num
    min_value: 0
    max_value: 100
    step: 1
    lambda: |-
      return id(screen_brightness).current_values.get_brightness() * 100.0;
    set_action:
      then:
        - light.turn_on:
            id: screen_brightness
            brightness: !lambda "return x / 100.0;"
  - platform: template
    name: "Screen Brightness - Sleep"
    id: screen_brightness_sleep
    optimistic: True
    min_value: 0
    max_value: 100
    step: 1
    restore_value: True
    initial_value: 30
  - platform: template
    name: "Screen Brightness - Awake"
    id: screen_brightness_awake
    optimistic: True
    min_value: 0
    max_value: 100
    step: 1
    restore_value: True
    initial_value: 100

switch:
  - platform: template
    name: DayNight
    id: DayNight
    icon: "mdi:theme-light-dark"
    optimistic: True
    on_turn_on:
      then:
        - script.execute: screen_sleep
    on_turn_off:
      then:
        - script.execute: screen_wake
  - platform: template
    name: Sleep 2 Enabled
    id: sleep_2_enable
    optimistic: True
    restore_mode: RESTORE_DEFAULT_OFF
    web_server:
      sorting_weight: 5
      sorting_group_id: time_group
  - platform: template
    name: Sleep 3 Enabled
    id: sleep_3_enable
    optimistic: True
    restore_mode: RESTORE_DEFAULT_OFF
    web_server:
      sorting_weight: 8
      sorting_group_id: time_group